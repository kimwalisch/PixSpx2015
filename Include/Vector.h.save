// -*- C++ -*-
#ifndef Vector_h
#define Vector_h
#include<iostream>

using namespace  std;

template<class T> class Vector
{
protected:
  T* elts;
  long32 dim;
  inline long32 best_index(long32,long32,int (*comp)(T,T));
public:
  Vector(const Vector &v) { 
    dim  = v.dim;
    elts = new T[dim];
    for (long32 j = 0; j < dim; j++) elts[j] = v.elts[j]; }
  Vector<T> operator + (Vector<T> &v);
  Vector<T> operator - (Vector<T> &v);
  Vector<T>& operator = (const Vector<T> &v) {
    if (dim != v.dim)
      {
	cout << "Vectors of different sizes in (Vector) = (Vector)\n";
	error();	
      }
    for (long32 j = 0; j < dim; j++) elts[j] = v[j];
    return *this; }
  void create(long32 n) { dim = n; elts = new T[dim]; }
  void insertion_sort0(int (*comp)(T,T), long32, long32);
  Vector() { dim = 0; }
  ~Vector() { 
#ifdef DEBUG_VC
    cout << "~Vector(): destruction of Vector.elts\n";
#endif
    delete[] elts; }
  long32 get_dim() const { return dim; }
  T& operator[] (long32 n)  const { 
#ifdef DEBUG_SAFE
    if ((n < 0) || (n > dim-1))
      {
	cout << "Vector: index n = " << n << " is invalid \n";
	error();
      }
#endif
    return elts[n]; }
  void set_elts_to(T);
  void display(int w = 2) const;
  void display_with_sum(int w = 2) const;
  inline void swap(long32, long32);
  void insertion_sort(int (*comp)(T,T));
  long32 partition_wrt(int (*comp)(T,T), long32, 
			    long32, long32);
  void quick_sort(int (*comp)(T,T));
  long32 index_of_first_bigger_than(T v, int (*comp)(T,T));
};

template<class T> void Vector<T>::display(int w) const
{
  for (long32 i = 0; i < dim; i++ )
  {
    cout << elts[i];
    for (long32 j = 0; j < w; j++) cout << " ";  // FIXME!
  }
  cout << "\n";
  cout.flush();
}

template<class T> void Vector<T>::display_with_sum(int w) const
{
  for (long32 i = 0; i < dim; i++ )
  {
    cout << elts[i];
    for (long32 j = 0; j < w; j++) cout << " ";  // FIXME!
  }
  T sum = (T)0;
  for (long32 j = 0; j < dim; j++) sum += elts[j];
  cout << "[sum = " << sum << "]"; 
  cout << "\n";
  cout.flush();
}

template<class T> void Vector<T>::swap(long32 i, long32 j)
{
  T v;

  v = elts[i];
  elts[i] = elts[j];
  elts[j] = v;
}

template<class T> void Vector<T>::insertion_sort0(int (*comp)(T,T),
						 long32 start,
						 long32 end)
{
  long32 j;
  T v;

  for (long32 i = start; i < end; i++)
    {
      j = i;
      v = elts[j+1];
      while ((j >= start) && (comp(v, elts[j]) < 0))
	{
	  elts[j+1] = elts[j];
	  j--;
	}
      elts[j+1] = v;
    }
}

template<class T> void Vector<T>::insertion_sort(int (*comp)(T,T))
{
  insertion_sort0(comp, 0, dim-1);
}

template<class T> long32 Vector<T>::partition_wrt(int (*comp)(T,T), 
						       long32 k,
						       long32 i, 
						       long32 j)
{
  T v = elts[k];

  while (i <= j)
    {
      if (comp(elts[i], v) <= 0) 
	{
	  i++; 
	  continue;
	} 
      if (comp(elts[j], v) >= 0)
	{ 
	  j--;
	  continue;
	}

      swap(i,j);
      i++; j--;
    }

  if (k < i) 
    {
      swap(k, j);
      return j;
    }
  
  swap(k, i);	
  return i;
}

// return the best index choice between start, end and (start+end)/2
template<class T> long32 Vector<T>::best_index(long32 start,
						    long32 end,
						    int (*comp)(T,T))
{
  long32 middle = (start + end)/2;

  if (comp(elts[start], elts[middle]) > 0)
    swap(start, middle);

  if (comp(elts[start], elts[end]) > 0)
    swap(start, end);

  if (comp(elts[middle], elts[end]) > 0)
    swap(middle, end);

  return middle;
}

// non-recursive quicksort using insertion sort when lenght <= 8
template<class T> void Vector<T>::quick_sort(int (*comp)(T,T))
{
  long32 start = 0;
  long32 end = dim - 1;
  long32 k = 0;
  long32 stack[60];
  int top = 2;
  
  do
    {
      if (end-start <= 8)
	{
	  insertion_sort0(comp, start, end);
	  end = stack[--top];
	  start = stack[--top];
	}
      else
	{
	  k = best_index(start, end, comp);
	  // k = start;
	  k = partition_wrt(comp, k, start, end);
	  if ((k-start) > (end-k))
	    {
	      stack[top++] = start;
	      stack[top++] = k-1;
	      start = k+1; 
	    }
	  else
	    {
	      stack[top++] = k+1;
	      stack[top++] = end;
	      end = k-1;
	    }
	}
    }
  while (top);
}

template<class T> void Vector<T>::set_elts_to(T v)
{
  for (long32 j = 0; j < dim; j++)
    elts[j] = v;
}

template<class T> long32 
Vector<T>::index_of_first_bigger_than(T v, int (*comp)(T,T))
{
  long32 first = 0;
  long32 last  = dim;

  if (comp(v, elts[first]) < 0)
    return first;

  while (first+1 < last)
    {
      long32 middle = first + (last-first)/2;  
      if (comp(elts[middle], v) > 0)
        last = middle;
      else first = middle;     
    }
  return last;
}

template<class T> Vector<T>
Vector<T>::operator + (Vector<T> &v)
{
  if (dim != v.dim)
    {
      cout << "Vectors of different sizes in (Vector) += (Vector)\n";
      error();
    }
  Vector<T> result;
  result.create(dim);
  for (long32 j = 0; j < dim; j++) result[j] = elts[j] + v[j];
  
  return result;
}

template<class T> Vector<T>
Vector<T>::operator - (Vector<T> &v)
{
  if (dim != v.dim)
    {
      cout << "Vectors of different sizes in (Vector) += (Vector)\n";
      error();
    }
  Vector<T> result;
  result.create(dim);
  for (long32 j = 0; j < dim; j++) result[j] = elts[j] - v[j];
  
  return result;
}

#endif
